# Imports
import galois
from multiprocessing import Pool, Process
from pathos.multiprocessing import ProcessingPool as Pool
import numpy as np

import time

def increment(i, m, x):
    return (x ** i) * m[i]

# self.lpn_matrices = [ np.array([self.bitarr(k) for a in range(ecc_len)]) for _ in range(self.l) ]


def generateLPN(bits, k, ecc_len, l):
    t1 = time.time()
    p = Pool()
    matrices = p.map(lambda a : np.array([bits(k) for _ in range(ecc_len)]), range(l))
    
    t2 = time.time()
    print(f"Generated {len(matrices)} LPN matrices in {t2 - t1} seconds")

    return matrices


def mx_parallel(fm, fx, fL, poly):
    t1 = time.time()
    p = Pool()
    results = p.map(lambda a : pow(fx, a, poly) * fm[a], range(fL))
    t2 = time.time()
    s = galois.Poly.Int(0)
    for i in results:
        s = s + i
    s = s % poly
    print(f"Parallel m with {p.ncpus} workers took {time.time() - t1} seconds. {t2-t1} for map, {time.time() - t2} for sum")
    # p.close()
    return s


def mx_serial(fm, fx, fL, poly):
    t1 = time.time()
    s = galois.Poly.Int(0)
    for i in range(fL):
        s = (s + (pow(fx, i, poly) * fm[i])) % poly
    # s = s % poly
    print(f"Serial m with  took {time.time() - t1} seconds")
    
    return s

# def m(self, fm, fx, fL):
#     t1 = time.time()
#     # accumulator for sum
#     acc = self.gf.elm([0])
#     # accumulator for x^i
#     x = fx ** 0
#     for i in range(1,fL):
#         x = x * fx
#         acc = acc + (x * fm[i])
#     print(f"Serial m took {time.time() - t1} seconds")
#     return acc


# def m_(self, fm, fx, fL): # FIXME does NOT work at all
#     t1 = time.time()
#     # accumulator for sum
#     acc = self.gf.elm([])
#     # def plus(a): return (fx ** a) * fm[a]
#     # plus = lambda a : (fx ** a) * fm[a]
#     # margs = (fm, fx)
#     # a = range(fL)
#     # b = [fm for _ in range(fL)]
#     # c = [fx for _ in range(fL)]
#     d = zip(a,b,c)
#     with Pool() as p:
#         inc = p.starmap(increment, d)
#     print(inc)
#     acc = acc + sum(inc)
#     print(f"Parallel m took {time.time() - t1} seconds")
#     return acc



# ['Code is

#  'Error rate is  0.11',

#  '111110010101100110000010010001100111011000010000010110100110101011010010100000101011101111010100000110010001101101000000000010000010111010010010100010110010011000100100111000001101100100011010110110110100101101001100010010111101000110000000010100011000001100110101100110011000100111000010111100011110110001110101000000000111011101000001100001000111000011010101000110010011111011101010111001110110',
#  '']
# ['Code is
#  'Error rate is  0.11',
#  'Decoded 1 blocks, 0 valid.  Average 250.0 iterations, 3% bit changes',
#  '100011010010000001010010001111101111000001001011110001000110011101010101001101000101000001110000110000000111100001110001010100111100100001101001011110110111111111110001111100010001011101000110010100001010110111110011111011100011001111010011100100111111110001111101101001101110001111010100101110010001100010101001110010100001111010100011100000101011010110010010101011110100011010011001100001100111',
#  '']
